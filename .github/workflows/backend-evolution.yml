name: Deploy Backend & Evolution API to Contabo VM

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup SSH for Contabo VM
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.CONTABO_SSH_KEY }}

      - name: Upload Project Files to Contabo VM
        run: |
          rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no -p 22486" \
            --include='docker-compose.yml' \
            --include='Dockerfile' \
            --include='package.json' \
            --include='yarn.lock' \
            --include='README.md' \
            --include='db.js' \
            --include='estrutura_back.txt' \
            --include='prisma/***' \
            --include='src/***' \
            --exclude='*' \
            ./ admin@${{ secrets.CONTABO_HOST }}:/home/admin/backend/

      - name: Create .env file on Contabo VM
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.CONTABO_SSH_PORT || 22486 }} admin@${{ secrets.CONTABO_HOST }} << EOF
            mkdir -p /home/admin/backend
            echo "# --- Evolution API Settings ---" > /home/admin/backend/.env
            echo "SERVER_TYPE=http" >> /home/admin/backend/.env
            echo "SERVER_PORT=8080" >> /home/admin/backend/.env
            # Use um nome de banco dedicado para Evolution
            echo "DATABASE_PROVIDER=postgresql" >> /home/admin/backend/.env
            echo "DATABASE_CONNECTION_URI='postgresql://${{ secrets.DB_USER || 'user' }}:${{ secrets.DB_PASS || 'pass' }}@postgres:5432/${{ secrets.EVO_DB_NAME || 'evolution_prod' }}?schema=public'" >> /home/admin/backend/.env
            echo "AUTHENTICATION_API_KEY=\"${{ secrets.EVOLUTION_API_KEY }}\"" >> /home/admin/backend/.env
            echo "WEBHOOK_GLOBAL_ENABLED=true" >> /home/admin/backend/.env
            echo "WEBHOOK_GLOBAL_URL='https://${{ secrets.APP_DOMAIN }}/api/whatsapp/webhook'" >> /home/admin/backend/.env
            echo "WEBHOOK_EVENTS_MESSAGES_UPSERT=true" >> /home/admin/backend/.env
            echo "CACHE_REDIS_ENABLED=true" >> /home/admin/backend/.env
            echo "CACHE_REDIS_URI=redis://redis:6379/6" >> /home/admin/backend/.env

            echo "" >> /home/admin/backend/.env
            echo "# --- Backend ConviteCerto Settings ---" >> /home/admin/backend/.env
            echo "PORT=5000" >> /home/admin/backend/.env
            # Use um nome de banco dedicado para o Backend e um schema específico
            echo "DATABASE_URL=\"postgresql://${{ secrets.DB_USER || 'user' }}:${{ secrets.DB_PASS || 'pass' }}@postgres:5432/${{ secrets.BACKEND_DB_NAME || 'convitecerto_prod' }}?schema=backend_schema\"" >> /home/admin/backend/.env
            echo "JWT_SECRET=\"${{ secrets.JWT_SECRET }}\"" >> /home/admin/backend/.env
            echo "EVOLUTION_API_URL=\"http://api:8080\"" >> /home/admin/backend/.env
            echo "EVOLUTION_API_KEY=\"${{ secrets.EVOLUTION_API_KEY }}\"" >> /home/admin/backend/.env
            echo "EVOLUTION_INSTANCE_NAME=\"myinstance\"" >> /home/admin/backend/.env

            # Remover variáveis PG_* redundantes
            # echo "PG_HOST=postgres" >> /home/admin/backend/.env
            # ... (remover outras PG_*)
          EOF

      - name: Deploy Application on Contabo VM
        run: |
          ssh -o StrictHostKeyChecking=no -p 22486 admin@${{ secrets.CONTABO_HOST }} << EOF
            set -e # Exit immediately if a command exits with a non-zero status.
            cd /home/admin/backend

            # Ensure Docker is installed
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker admin # Add admin to docker group (may require new session for user)
              echo "Docker installed."
            else
              echo "Docker is already installed."
            fi

            # Ensure Docker Compose (plugin V2) is available
            if ! docker compose version &> /dev/null; then
              echo "Docker Compose V2 not found. Please ensure Docker Engine is up-to-date and includes the Compose plugin."
              echo "Attempting to update Docker which might include Docker Compose plugin..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              if ! docker compose version &> /dev/null; then
                 echo "Docker Compose V2 still not found. Please install it manually on the VM."
                 exit 1
              fi
            else
              echo "Docker Compose V2 is available."
            fi

            echo "Stopping old services (if running)..."
            sudo docker compose down

            echo "Building services with the latest code..."
            sudo docker compose build

            echo "Starting all services..."
            sudo docker compose up -d

            echo "Applying Prisma migrations..."
            # Espera um pouco para o backend iniciar antes de tentar a migração
            sleep 15 
            # Executa a migração dentro do container do backend
            sudo docker compose exec -T backend npx prisma migrate deploy

            echo "Deployment finished."
          EOF

      - name: Verify Deployment on Contabo VM
        run: |
          ssh -o StrictHostKeyChecking=no -p 22486 admin@${{ secrets.CONTABO_HOST }} << EOF
            cd /home/admin/backend

            echo "Verifying Docker containers status:"
            sudo docker compose ps

            echo "Verifying backend logs (last 30 lines):"
            sudo docker compose logs --tail=30 backend

            echo "Verifying api logs (last 30 lines):"
            sudo docker compose logs --tail=30 api # Assuming 'api' is the service name for Evolution API

            echo "Verifying postgres logs (last 30 lines):"
            sudo docker compose logs --tail=30 postgres
          EOF