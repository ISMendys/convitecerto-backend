
name: Deploy Backend & Evolution API to Contabo VM

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup SSH for Contabo VM
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.CONTABO_SSH_KEY }}

      - name: Upload Project Files to Contabo VM
        run: |
          # Upload docker-compose-modified.yml instead of the old one
          # Ensure the modified docker-compose.yml is in your repo or created here
          # For now, assuming docker-compose-modified.yml exists in the repo root
          rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no -p ${{ secrets.CONTABO_SSH_PORT || 22486 }}" \
            --include=\'docker-compose.yml\' \
            --include=\'Dockerfile\' \
            --include=\'package.json\' \
            --include=\'yarn.lock\' \
            --include=\'README.md\' \
            --include=\'db.js\' \
            --include=\'estrutura_back.txt\' \
            --include=\'prisma/***\' \
            --include=\'src/***\' \
            --exclude=\'*\' \
            ./ admin@${{ secrets.CONTABO_HOST }}:/home/admin/backend/

      - name: Create Separate .env files on Contabo VM
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.CONTABO_SSH_PORT || 22486 }} admin@${{ secrets.CONTABO_HOST }} << EOF
            mkdir -p /home/admin/backend

            # Create .env.api
            echo "# Arquivo: .env.api" > /home/admin/backend/.env.api
            echo "# Variáveis de ambiente específicas para a Evolution API" >> /home/admin/backend/.env.api
            echo "SERVER_TYPE=http" >> /home/admin/backend/.env.api
            echo "SERVER_PORT=8080" >> /home/admin/backend/.env.api
            echo "DATABASE_PROVIDER=postgresql" >> /home/admin/backend/.env.api
            echo "DATABASE_CONNECTION_URI=\"postgresql://${{ secrets.DB_USER || 'user' }}:${{ secrets.DB_PASS || 'pass' }}@postgres:5432/${{ secrets.EVO_DB_NAME || 'evolution_prod' }}?schema=public\"" >> /home/admin/backend/.env.api
            # IMPORTANT: Use the correct secret name for the API key
            echo "AUTHENTICATION_API_KEY=\"${{ secrets.EVOLUTION_API_KEY }}\"" >> /home/admin/backend/.env.api
            echo "WEBHOOK_GLOBAL_ENABLED=true" >> /home/admin/backend/.env.api
            # Use internal service name 'backend' for webhook URL
            echo "WEBHOOK_GLOBAL_URL=\"http://backend:5000/api/whatsapp/webhook\"" >> /home/admin/backend/.env.api
            echo "WEBHOOK_EVENTS_MESSAGES_UPSERT=true" >> /home/admin/backend/.env.api
            echo "CACHE_REDIS_ENABLED=true" >> /home/admin/backend/.env.api
            echo "CACHE_REDIS_URI=redis://redis:6379/6" >> /home/admin/backend/.env.api

            # Create .env.backend
            echo "# Arquivo: .env.backend" > /home/admin/backend/.env.backend
            echo "# Variáveis de ambiente específicas para o Backend ConviteCerto" >> /home/admin/backend/.env.backend
            echo "PORT=5000" >> /home/admin/backend/.env.backend
            echo "DATABASE_URL=\"postgresql://${{ secrets.DB_USER || 'user' }}:${{ secrets.DB_PASS || 'pass' }}@postgres:5432/${{ secrets.BACKEND_DB_NAME || 'convitecerto_prod' }}?schema=backend_schema\"" >> /home/admin/backend/.env.backend
            echo "JWT_SECRET=\"${{ secrets.JWT_SECRET }}\"" >> /home/admin/backend/.env.backend
            echo "EVOLUTION_API_URL=\"http://api:8080\"" >> /home/admin/backend/.env.backend
            echo "EVOLUTION_API_KEY=\"${{ secrets.EVOLUTION_API_KEY }}\"" >> /home/admin/backend/.env.backend
            echo "EVOLUTION_INSTANCE_NAME=\"myinstance\"" >> /home/admin/backend/.env.backend

            # Create .env for docker-compose environment variables (DB user/pass)
            # These are used by the postgres service definition itself
            echo "# Arquivo: .env (para docker-compose)" > /home/admin/backend/.env
            echo "DB_USER=${{ secrets.DB_USER || 'user' }}" >> /home/admin/backend/.env
            echo "DB_PASS=${{ secrets.DB_PASS || 'pass' }}" >> /home/admin/backend/.env
            echo "EVO_DB_NAME=${{ secrets.EVO_DB_NAME || 'evolution_prod' }}" >> /home/admin/backend/.env
            echo "BACKEND_DB_NAME=${{ secrets.BACKEND_DB_NAME || 'convitecerto_prod' }}" >> /home/admin/backend/.env
            # Include secrets needed by the .env.api and .env.backend files too
            echo "EVOLUTION_API_KEY=${{ secrets.EVOLUTION_API_KEY }}" >> /home/admin/backend/.env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> /home/admin/backend/.env

          EOF

      - name: Deploy Application on Contabo VM
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.CONTABO_SSH_PORT || 22486 }} admin@${{ secrets.CONTABO_HOST }} << EOF
            set -e # Exit immediately if a command exits with a non-zero status.
            cd /home/admin/backend

            # Ensure Docker is installed (keep this check)
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker admin
              echo "Docker installed."
            else
              echo "Docker is already installed."
            fi

            # Ensure Docker Compose (plugin V2) is available (keep this check)
            if ! docker compose version &> /dev/null; then
              echo "Docker Compose V2 not found. Attempting to update Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              if ! docker compose version &> /dev/null; then
                 echo "Docker Compose V2 still not found. Please install it manually."
                 exit 1
              fi
            else
              echo "Docker Compose V2 is available."
            fi

            echo "Stopping old services (if running)..."
            # Use the modified docker-compose file
            sudo docker compose -f docker-compose.yml down || echo "No services were running."

            echo "Building services with the latest code..."
            # Use the modified docker-compose file
            sudo docker compose -f docker-compose.yml build

            echo "Starting all services..."
            # Use the modified docker-compose file
            sudo docker compose -f docker-compose.yml up -d

            echo "Applying Prisma migrations..."
            sleep 15
            # Use the modified docker-compose file
            sudo docker compose -f docker-compose.yml exec -T backend npx prisma migrate deploy

            echo "Deployment finished."
          EOF

      - name: Verify Deployment on Contabo VM
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.CONTABO_SSH_PORT || 22486 }} admin@${{ secrets.CONTABO_HOST }} << EOF
            cd /home/admin/backend

            echo "Verifying Docker containers status:"
            # Use the modified docker-compose file
            sudo docker compose -f docker-compose.yml ps

            echo "Verifying backend logs (last 30 lines):"
            # Use the modified docker-compose file
            sudo docker compose -f docker-compose.yml logs --tail=30 backend

            echo "Verifying api logs (last 30 lines):"
            # Use the modified docker-compose file
            sudo docker compose -f docker-compose.yml logs --tail=30 api

            echo "Verifying postgres logs (last 30 lines):"
            # Use the modified docker-compose file
            sudo docker compose -f docker-compose.yml logs --tail=30 postgres
          EOF

