name: Deploy Backend & Evolution API to Contabo VM

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Fix permissions locally (if needed for files before rsync)
        run: |
          # This step might not be strictly necessary if permissions are correct in the repo
          # or if the rsync command handles permissions appropriately.
          chmod -R u+rw .

      - name: Setup SSH for Contabo VM
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.CONTABO_SSH_KEY }} 

      - name: Upload Project Files to Contabo VM
        run: |
          # Using 'admin' user as per recent logs
          # Ensure the target directory exists on the VM or create it in a prior step if necessary.
          # Example: ssh -o StrictHostKeyChecking=no -p 22486 admin@${{ secrets.CONTABO_HOST }} "mkdir -p /home/admin/backend/"
          rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no -p 22486" \
            --include='docker-compose.yml' \
            --include='Dockerfile' \
            --include='package.json' \
            --include='yarn.lock' \
            --include='README.md' \
            --include='db.js' \
            --include='estrutura_back.txt' \
            --include='prisma/***' \
            --include='src/***' \
            --exclude='*' \
            ./ admin@${{ secrets.CONTABO_HOST }}:/home/admin/backend/ # Using admin user and assuming /home/admin/backend

      - name: Create .env file on Contabo VM using Secrets
        run: |
          # Using 'admin' user
          ssh -o StrictHostKeyChecking=no -p 22486 admin@${{ secrets.CONTABO_HOST }} << EOF
            # Ensure the target directory exists
            mkdir -p /home/admin/backend # Assuming /home/admin/backend
            # Create or overwrite the .env file in the backend directory
            echo "SERVER_TYPE=http" > /home/admin/backend/.env
            echo "SERVER_PORT=8080" >> /home/admin/backend/.env 
            echo "SERVER_URL=http://localhost:8080" >> /home/admin/backend/.env 

            echo "DATABASE_PROVIDER=postgresql" >> /home/admin/backend/.env
            echo "DATABASE_CONNECTION_URI='postgresql://user:pass@postgres:5432/evolution?schema=public'" >> /home/admin/backend/.env

            echo "AUTHENTICATION_API_KEY=\"${{ secrets.EVOLUTION_API_KEY }}\"" >> /home/admin/backend/.env
            echo "WEBHOOK_GLOBAL_ENABLED=true" >> /home/admin/backend/.env
            echo "WEBHOOK_GLOBAL_URL='https://${{ secrets.APP_DOMAIN }}/api/whatsapp/webhook'" >> /home/admin/backend/.env
            echo "WEBHOOK_EVENTS_MESSAGES_UPSERT=true" >> /home/admin/backend/.env
            echo "CACHE_REDIS_ENABLED=true" >> /home/admin/backend/.env
            echo "CACHE_REDIS_URI=redis://redis:6379/6" >> /home/admin/backend/.env

            echo "DATABASE_URL=\"postgresql://user:pass@postgres:5432/evolution?schema=public\"" >> /home/admin/backend/.env
            echo "JWT_SECRET=\"${{ secrets.JWT_SECRET }}\"" >> /home/admin/backend/.env
            echo "EVOLUTION_API_URL=\"http://api:8080\"" >> /home/admin/backend/.env 
            echo "EVOLUTION_API_KEY=\"${{ secrets.EVOLUTION_API_KEY }}\"" >> /home/admin/backend/.env
            echo "EVOLUTION_INSTANCE_NAME=\"myinstance\"" >> /home/admin/backend/.env

            echo "PG_HOST=postgres" >> /home/admin/backend/.env
            echo "PG_PORT=5432" >> /home/admin/backend/.env
            echo "PG_USER=user" >> /home/admin/backend/.env
            echo "PG_PASSWORD=pass" >> /home/admin/backend/.env
            echo "PG_DATABASE=evolution" >> /home/admin/backend/.env
          EOF

      - name: Deploy with Docker Compose on Contabo VM
        run: |
          # Using 'admin' user
          ssh -o StrictHostKeyChecking=no -p 22486 admin@${{ secrets.CONTABO_HOST }} << EOF
            cd /home/admin/backend # Assuming /home/admin/backend
            
            # Ensure Docker and Docker Compose are installed
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              # Add the current user (admin) to the docker group
              sudo usermod -aG docker admin 
              echo "Docker installed. User 'admin' added to docker group. A new login session might be needed for group changes to take full effect without sudo."
            else
              echo "Docker is already installed."
            fi
            
            if ! command -v docker-compose &> /dev/null; then
              echo "Installing Docker Compose..."
              LATEST_COMPOSE_VERSION="v2.27.0" 
              sudo curl -L "https://github.com/docker/compose/releases/download/\${LATEST_COMPOSE_VERSION}/docker-compose-\$(uname -s)-\$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              echo "Docker Compose installed."
            else
              echo "Docker Compose is already installed."
            fi
            
            # Using sudo for docker-compose commands to ensure permissions
            echo "Stopping and removing old containers if they exist..."
            sudo docker-compose down

            echo "Building backend service without cache..."
            sudo docker-compose build --no-cache backend 
            
            echo "Starting all services..."
            sudo docker-compose up -d
            
            echo "Waiting for backend service to start before running migrations..."
            sleep 15 

            # Apply Prisma migrations using sudo with docker-compose exec
            sudo docker-compose exec -T backend npx prisma migrate deploy
          EOF

      - name: Verify Deployment on Contabo VM
        run: |
          # Using 'admin' user
          ssh -o StrictHostKeyChecking=no -p 22486 admin@${{ secrets.CONTABO_HOST }} << EOF
            cd /home/admin/backend # Assuming /home/admin/backend

            echo "Verifying Docker containers..."
            sudo docker-compose ps # Using sudo

            echo "Verifying backend logs (last 30 lines)..."
            sudo docker-compose logs --tail=30 backend # Using sudo

            echo "Verifying api logs (last 30 lines)..."
            sudo docker-compose logs --tail=30 api # Using sudo

            echo "Verifying postgres logs (last 30 lines)..."
            sudo docker-compose logs --tail=30 postgres # Using sudo
          EOF
